joint_p = sum(joint_p)) %>%
fungroup() |>
fmutate(
joint_d_theta_0 = joint_d_theta_0*param$theta_0*(1 - param$theta_0),
joint_d_theta_1 = joint_d_theta_1*param$theta_1*(1 - param$theta_1),
joint_d_pi = joint_d_pi*param$pi*(1 - param$pi)
)
df_gi <- df_estimate %>%
joyn::left_join(df_grad, by = c('y1', 'y2', 'y3'), relationship = "many-to-many",
verbose = F) %>%
fmutate(
lgi_theta_0 = weight*joint_d_theta_0/joint_p,
lgi_theta_1 = weight*joint_d_theta_1/joint_p,
lgi_pi = weight*joint_d_pi/joint_p
) %>%
fselect(lgi_theta_0, lgi_theta_1, lgi_pi)
if(pi0) df_gi <- df_gi %>% fselect(lgi_theta_0, lgi_theta_1)
return(df_gi)
}
calc_mle_3waves_ar1_fst <- function(param_transformed) {
ll <- fsum(calc_lli_3waves_ar1_fst(param_transformed))
return(ll)
}
calc_mle_derivatives_3waves_ar1_fst <- function(param_transformed) {
lg <- colSums(calc_lli_derivatives_3waves_ar1_fst(param_transformed))
return(lg)
}
benchmark <- microbenchmark::microbenchmark(
times = 100,
# Test 1: Original MLE estimation
"Procedure1" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed <- logit_transform(param_init)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = param_init_transformed,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = model_mle_3w_ar1$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
},
# Test 2: Alternative MLE estimation with "fst"
"Procedure2" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init_fst <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed_fst <- logit_transform_fst(param_init_fst)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = param_init_transformed_fst,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = model_mle_3w_ar1_fst$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
}
)
benchmark <- microbenchmark::microbenchmark(
times = 10,
# Test 1: Original MLE estimation
"dplyr" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed <- logit_transform(param_init)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = param_init_transformed,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = model_mle_3w_ar1$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
},
# Test 2: Alternative MLE estimation with "fst"
"fastverse" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init_fst <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed_fst <- logit_transform_fst(param_init_fst)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = param_init_transformed_fst,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = model_mle_3w_ar1_fst$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
}
)
benchmark <- microbenchmark::microbenchmark(
times = 1,
# Test 1: Original MLE estimation
"dplyr" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed <- logit_transform(param_init)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = param_init_transformed,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = model_mle_3w_ar1$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
},
# Test 2: Alternative MLE estimation with "fst"
"fastverse" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init_fst <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed_fst <- logit_transform_fst(param_init_fst)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = param_init_transformed_fst,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = model_mle_3w_ar1_fst$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
}
)
# Plotting the benchmark results
if (requireNamespace("highcharter", quietly = TRUE)) {
hc_bench <- highcharter::data_to_boxplot(
benchmark,
time,
expr,
add_outliers = FALSE,
name = "Benchmark Efficiency"
)
highcharter::highchart() |>
highcharter::hc_xAxis(type = "category") |>
highcharter::hc_chart(inverted = TRUE) |>
highcharter::hc_add_series_list(hc_bench)
} else {
boxplot(benchmark, outline = FALSE, main = "Benchmarking MLE Procedures")
}
logit_transform_fst <- function(param0) {
log(param0 / (1 - param0))
}
logit_inverse_fst <- function(param_input0) {
1 / (1 + exp(-param_input0))
}
# Helper: vectorized probability computation
compute_probs_temp <- function(param, mu) {
# Precompute indices for p2_star and p3_star
idx12 <- df_template$y1_star * 2 + df_template$y2_star + 1  # Values 1 to 4
idx23 <- df_template$y2_star * 2 + df_template$y3_star + 1
p2_star_vals <- c(1 - param$theta_0, param$theta_0, param$theta_1, 1 - param$theta_1)
p3_star_vals <- c(1 - param$theta_0, param$theta_0, param$theta_1, 1 - param$theta_1)
fmutate(
df_template,
p1_star = fifelse(y1_star == 1, mu, 1 - mu),
p2_star = p2_star_vals[idx12],
p3_star = p3_star_vals[idx23],
p1 = fifelse(y1 == y1_star, 1 - param$pi, param$pi),
p2 = fifelse(y2 == y2_star, 1 - param$pi, param$pi),
p3 = fifelse(y3 == y3_star, 1 - param$pi, param$pi),
joint_p = p1_star * p1 * p2_star * p2 * p3_star * p3
)
}
# Log-likelihood function
calc_lli_3waves_ar1_fst <- function(param_transformed, pi0 = FALSE) {
param <- logit_inverse_fst(param_transformed)
if (pi0) param$pi <- 0
mu <- param$theta_0 / (param$theta_1 + param$theta_0)
df_probs_temp <- compute_probs_temp(param, mu)
df_probs <- df_probs_temp %>%
fgroup_by(y1, y2, y3) %>%
fsummarise(joint_p = fsum(joint_p)) %>%
fungroup()
df_estimate %>%
join(df_probs, on = c("y1", "y2", "y3"), verbose = FALSE) %>%
fmutate(lli = weight * log(joint_p)) %>%
pull(lli)
}
# Derivatives (gradient) of log-likelihood
calc_lli_derivatives_3waves_ar1_fst <- function(param_transformed, pi0 = FALSE) {
param <- logit_inverse_fst(param_transformed)
if (pi0) param$pi <- 0
mu <- param$theta_0 / (param$theta_1 + param$theta_0)
# Precompute p*_star via vectorized indexing
idx12 <- df_template$y1_star * 2 + df_template$y2_star + 1
idx23 <- df_template$y2_star * 2 + df_template$y3_star + 1
p2_star_vals <- c(1 - param$theta_0, param$theta_0, param$theta_1, 1 - param$theta_1)
p3_star_vals <- c(1 - param$theta_0, param$theta_0, param$theta_1, 1 - param$theta_1)
df_probs_temp <- fmutate(
df_template,
p1_star = fifelse(y1_star == 1, mu, 1 - mu),
p2_star = p2_star_vals[idx12],
p3_star = p3_star_vals[idx23],
p1 = fifelse(y1 == y1_star, 1 - param$pi, param$pi),
p2 = fifelse(y2 == y2_star, 1 - param$pi, param$pi),
p3 = fifelse(y3 == y3_star, 1 - param$pi, param$pi)
) %>%
fmutate(
joint_p = p1_star * p1 * p2_star * p2 * p3_star * p3,
# Derivatives of mu with respect to theta_0 and theta_1
d1_star_theta_0 = fifelse(y1_star == 0,
-param$theta_1 / ((param$theta_1 + param$theta_0)^2),
param$theta_1 / ((param$theta_1 + param$theta_0)^2)),
d1_star_theta_1 = fifelse(y1_star == 0,
param$theta_0 / ((param$theta_1 + param$theta_0)^2),
-param$theta_0 / ((param$theta_1 + param$theta_0)^2)),
d2_star_theta_0 = as.numeric(idx12 %in% c(1, 2)) * c(-1, 1)[df_template$y2_star + 1],
d2_star_theta_1 = as.numeric(idx12 %in% c(3, 4)) * c(1, -1)[df_template$y2_star - 1],
d3_star_theta_0 = as.numeric(idx23 %in% c(1, 2)) * c(-1, 1)[df_template$y3_star + 1],
d3_star_theta_1 = as.numeric(idx23 %in% c(3, 4)) * c(1, -1)[df_template$y3_star - 1],
d1_pi = fifelse(y1 == y1_star, -1, 1),
d2_pi = fifelse(y2 == y2_star, -1, 1),
d3_pi = fifelse(y3 == y3_star, -1, 1)
) %>%
fmutate(
inv_p1_star = joint_p / p1_star,
inv_p2_star = joint_p / p2_star,
inv_p3_star = joint_p / p3_star,
inv_p1 = joint_p / p1,
inv_p2 = joint_p / p2,
inv_p3 = joint_p / p3,
joint_d_theta_0 = d1_star_theta_0 * inv_p1_star + d2_star_theta_0 * inv_p2_star + d3_star_theta_0 * inv_p3_star,
joint_d_theta_1 = d1_star_theta_1 * inv_p1_star + d2_star_theta_1 * inv_p2_star + d3_star_theta_1 * inv_p3_star,
joint_d_pi = d1_pi * inv_p1 + d2_pi * inv_p2 + d3_pi * inv_p3
)
df_grad <- df_probs_temp %>%
fgroup_by(y1, y2, y3) %>%
fsummarise(
joint_d_theta_0 = fsum(joint_d_theta_0),
joint_d_theta_1 = fsum(joint_d_theta_1),
joint_d_pi = fsum(joint_d_pi),
joint_p = fsum(joint_p)
) %>%
fungroup() %>%
fmutate(
joint_d_theta_0 = joint_d_theta_0 * param$theta_0 * (1 - param$theta_0),
joint_d_theta_1 = joint_d_theta_1 * param$theta_1 * (1 - param$theta_1),
joint_d_pi = joint_d_pi * param$pi * (1 - param$pi)
)
df_gi <- df_estimate %>%
join(df_grad, on = c("y1", "y2", "y3"), verbose = FALSE) %>%
fmutate(
lgi_theta_0 = weight * joint_d_theta_0 / joint_p,
lgi_theta_1 = weight * joint_d_theta_1 / joint_p,
lgi_pi = weight * joint_d_pi / joint_p
) %>%
fselect(lgi_theta_0, lgi_theta_1, lgi_pi)
if (pi0) df_gi <- fselect(df_gi, lgi_theta_0, lgi_theta_1)
df_gi
}
# Wrapper for likelihood
calc_mle_3waves_ar1_fst <- function(param_transformed) {
fsum(calc_lli_3waves_ar1_fst(param_transformed))
}
# Wrapper for gradient
calc_mle_derivatives_3waves_ar1_fst <- function(param_transformed) {
colSums(calc_lli_derivatives_3waves_ar1_fst(param_transformed))
}
benchmark <- microbenchmark::microbenchmark(
times = 1,
# Test 1: Original MLE estimation
"dplyr" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed <- logit_transform(param_init)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = param_init_transformed,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = model_mle_3w_ar1$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
},
# Test 2: Alternative MLE estimation with "fst"
"fastverse" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init_fst <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed_fst <- logit_transform_fst(param_init_fst)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = param_init_transformed_fst,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = model_mle_3w_ar1_fst$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
}
)
# Plotting the benchmark results
if (requireNamespace("highcharter", quietly = TRUE)) {
hc_bench <- highcharter::data_to_boxplot(
benchmark,
time,
expr,
add_outliers = FALSE,
name = "Benchmark Efficiency"
)
highcharter::highchart() |>
highcharter::hc_xAxis(type = "category") |>
highcharter::hc_chart(inverted = TRUE) |>
highcharter::hc_add_series_list(hc_bench)
} else {
boxplot(benchmark, outline = FALSE, main = "Benchmarking MLE Procedures")
}
benchmark <- microbenchmark::microbenchmark(
times = 1,
"dplyr" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed <- logit_transform(param_init)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = param_init_transformed,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = model_mle_3w_ar1$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
result_dplyr <<- list(estimate = model_mle_3w_ar1$estimate, logLik = model_mle_3w_ar1$maximum)
},
"fastverse" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init_fst <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed_fst <- logit_transform_fst(param_init_fst)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = param_init_transformed_fst,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = model_mle_3w_ar1_fst$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
result_fst <<- list(estimate = model_mle_3w_ar1_fst$estimate, logLik = model_mle_3w_ar1_fst$maximum)
}
)
all.equal(result_dplyr$estimate, result_fst$estimate)
all.equal(result_dplyr$logLik, result_fst$logLik)
round(result_dplyr$estimate - result_fst$estimate, 10)
result_dplyr$logLik - result_fst$logLik
result_dplyr$estimate
result_fst$estimate
benchmark <- microbenchmark::microbenchmark(
times = 10,
# Test 1: Original MLE estimation
"dplyr" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed <- logit_transform(param_init)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = param_init_transformed,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1 <- maxLik::maxLik(
calc_mle_3waves_ar1,
grad = calc_mle_derivatives_3waves_ar1,
start = model_mle_3w_ar1$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
},
# Test 2: Alternative MLE estimation with "fst"
"fastverse" = {
df_template <- data.table::CJ(y1 = c(0, 1), y1_star = c(0, 1), y2 = c(0, 1), y2_star = c(0, 1), y3 = c(0, 1), y3_star = c(0, 1))
df_estimate <- df_qlfs
param_init_fst <- data.frame(theta_0 = 0.03, theta_1 = 0.03, pi = 0.03)
param_init_transformed_fst <- logit_transform_fst(param_init_fst)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = param_init_transformed_fst,
method = "BFGS",
reltol = 0,
gradtol = 0
)
model_mle_3w_ar1_fst <- maxLik::maxLik(
calc_mle_3waves_ar1_fst,
grad = calc_mle_derivatives_3waves_ar1_fst,
start = model_mle_3w_ar1_fst$estimate,
method = "NM",
reltol = 0,
gradtol = 0
)
}
)
# Plotting the benchmark results
if (requireNamespace("highcharter", quietly = TRUE)) {
hc_bench <- highcharter::data_to_boxplot(
benchmark,
time,
expr,
add_outliers = FALSE,
name = "Benchmark Efficiency"
)
highcharter::highchart() |>
highcharter::hc_xAxis(type = "category") |>
highcharter::hc_chart(inverted = TRUE) |>
highcharter::hc_add_series_list(hc_bench)
} else {
boxplot(benchmark, outline = FALSE, main = "Benchmarking MLE Procedures")
}
rm(list = ls())
logit_transform <- function(param0) {
param_input <- log(param0/(1 - param0))
return(param_input)
}
logit_inverse <- function(param_input0) {
param <- 1/(1 + exp(-param_input0))
return(param)
}
logit_transform(0.5
)
logit_transform(0.5)
logit_transform(0)
logit_transform(0)
logit_inverse(0.5)
logit_transform(1)
logit_inverse(0.5)
logit_inverse(2)
